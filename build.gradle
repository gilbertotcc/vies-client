import net.researchgate.release.cli.Executor

buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath 'no.nils:wsdl2java:0.10'
  }
}

plugins {
  id 'java'
  id 'idea'
  id 'jacoco'
  id 'checkstyle'
  id 'maven-publish'
  id 'com.jfrog.bintray' version '1.8.4'
  id 'no.nils.wsdl2java' version '0.10'
  id 'com.adarshr.test-logger' version '1.6.0'
  id 'net.researchgate.release' version '2.8.0'
}

wrapper {
  gradleVersion = '5.1'
}

repositories {
  mavenLocal()
  maven {
    url = 'http://repo.maven.apache.org/maven2'
  }
}

dependencies {
  // COMMON
  compile 'io.vavr:vavr:0.10.0'
  annotationProcessor 'org.projectlombok:lombok:1.18.4'
  compileOnly 'org.projectlombok:lombok:1.18.4'

  // TESTING
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.4'
  testCompileOnly 'org.projectlombok:lombok:1.18.4'
  testCompile 'junit:junit:4.12'
  testCompile 'org.mockito:mockito-all:1.10.19'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext {
  jacocoMergedReport = file("$buildDir/jacoco/mergeTest.exec")
}

task jacocoMergeTestReport(type: JacocoMerge) {
  executionData tasks.withType(Test)
  destinationFile = jacocoMergedReport
}

jacocoTestReport {
  dependsOn jacocoMergeTestReport
  executionData jacocoMergedReport
  reports {
    xml.enabled false
    csv.enabled false
    html.enabled true
    html.destination file("${buildDir}/reports/jacocoHtml")
  }
}

test.finalizedBy jacocoTestReport

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

wsdl2javaExt {
  deleteGeneratedSourcesOnClean = true
}
wsdl2java {
  generatedWsdlDir = file("src/main/generated/")  // target directory for generated source coude
  wsdlDir = file("src/wsdl/") // define to support incremental build
  wsdlsToGenerate = [
    ['-xjc', '-b', 'src/wsdl/bindings.xml', 'http://ec.europa.eu/taxation_customs/vies/checkVatService.wsdl']
  ]
}
sourceSets.main.java.srcDirs.addAll(file("src/main/generated/"))

test.finalizedBy jacocoTestReport

// CHECKSTYLE

checkstyleMain.source = "src/main/java"
checkstyleTest.source = "src/test/java"

publishing {
  publications {
    maven(MavenPublication) {
      from components.java
    }
  }
}

release {
  preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit [skip ci]: '
  newVersionCommitMessage = '[Gradle Release Plugin] - new version commit [skip ci]: '
}

afterReleaseBuild.dependsOn bintrayUpload

commitNewVersion {
  doLast {
    logger.info("Merging and pushing branch 'master' to 'develop' after release.")
    def executor = new Executor(project.logger)
    def workingDirectory = project.rootDir
    def toBranch = 'develop'
    executor.exec(['git', 'fetch'], directory: workingDirectory, errorPatterns: ['error: ', 'fatal: '])
    executor.exec(['git', 'checkout', toBranch], directory: workingDirectory, errorPatterns: ['error: ', 'fatal: '])
    executor.exec(['git', 'merge', '--no-ff', 'master'], directory: workingDirectory, errorPatterns: ['error: ', 'fatal: ', 'CONFLICT'])
    executor.exec(['git', 'push', '--porcelain', 'origin', 'develop'], directory: workingDirectory, errorMessage: "Failed to push to 'develop' branch after 'master' was merged.", errorPatterns: ['[rejected]', 'error: ', 'fatal: '])
    executor.exec(['git', 'checkout', 'master'], directory: workingDirectory, errorPatterns: ['error: ', 'fatal: '])
  }
}

bintray {
  user = System.getenv('BINTRAY_USERNAME')
  key = System.getenv('BINTRAY_API_KEY')
  publish = true
  publications = ['maven']
  pkg {
    repo = 'utils'
    name = 'vies-client'
    desc = 'VIES (VAT Information Exchange System) client'
    licenses = ['BSD 2-Clause']
    websiteUrl = 'https://github.com/gilbertotcc/vies-client'
    vcsUrl = 'https://github.com/gilbertotcc/vies-client.git'
    githubRepo = 'gilbertotcc/vies-client'
    githubReleaseNotesFile = 'README.md'
    issueTrackerUrl = 'https://github.com/gilbertotcc/vies-client/issues'
  }
}
